&НаСервереБезКонтекста
Процедура ОбновитьСтатусДокумента(МассивЗадач, НовыйСтатус)
	Для Каждого ТекДокумент Из МассивЗадач Цикл
		ДокументОбъект = ТекДокумент.ПолучитьОбъект();

		Если ДокументОбъект.СтатусДокумента = НовыйСтатус Тогда
			Продолжить;
		КонецЕсли;

		ДокументОбъект.СтатусДокумента = НовыйСтатус;

		Если НовыйСтатус = Перечисления.СтатусДокумента.Подписан Тогда

			Для Каждого Строка Из ДокументОбъект.СвязанныеЗадачи.Выгрузить() Цикл
				Если Строка.Задачи.СтатусДокумента <> Перечисления.СтатусДокумента.Подписан Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтрШаблон("Нельзя завершить задачу: %1					                                                 
												|Пока не выполнена задача 
												|%2", ДокументОбъект.Ссылка, Строка.Задачи.Ссылка);
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли;
			КонецЦикла;

			ДокументОбъект.Выполнена = Истина;
			ДокументОбъект.ДатаФактическогоЗавершения = ТекущаяДата();
		Иначе
			ДокументОбъект.Выполнена = Ложь;
			ДокументОбъект.ДатаФактическогоЗавершения = Ложь;
		КонецЕсли;

		Попытка
			ДокументОбъект.Записать();
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не получилось поменять СтатусДокумента.Сорян, Бро! Зови админа" + ТекДокумент
				+ "потому что: " + ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыЗадачКлиент(МассивЗадач, НовыйСтатус)
	Если ТипЗнч(МассивЗадач) = Тип("Массив") Тогда
		ОбновитьСтатусДокумента(МассивЗадач, НовыйСтатус);
	КонецЕсли;
	Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СписокНовыйДокументПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОбновитьСтатусыЗадачКлиент(ПараметрыПеретаскивания.Значение, ПредопределенноеЗначение(
		"Перечисление.СтатусДокумента.НовыйДокумент"));
КонецПроцедуры

&НаКлиенте
Процедура СписокРегистрацияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОбновитьСтатусыЗадачКлиент(ПараметрыПеретаскивания.Значение, ПредопределенноеЗначение(
		"Перечисление.СтатусДокумента.Регистрация"));
КонецПроцедуры

&НаКлиенте
Процедура СписокНаПодписьПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОбновитьСтатусыЗадачКлиент(ПараметрыПеретаскивания.Значение, ПредопределенноеЗначение(
		"Перечисление.СтатусДокумента.НаПодпись"));
КонецПроцедуры
&НаКлиенте
Процедура СписокВозвращеннНаДоработкуПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОбновитьСтатусыЗадачКлиент(ПараметрыПеретаскивания.Значение, ПредопределенноеЗначение(
		"Перечисление.СтатусДокумента.ВозвращенНаДоработку"));
КонецПроцедуры

&НаКлиенте
Процедура СписокОтказаноПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОбновитьСтатусыЗадачКлиент(ПараметрыПеретаскивания.Значение, ПредопределенноеЗначение(
		"Перечисление.СтатусДокумента.Отказано"));
КонецПроцедуры
&НаКлиенте
Процедура СписокПодписанПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОбновитьСтатусыЗадачКлиент(ПараметрыПеретаскивания.Значение, ПредопределенноеЗначение(
		"Перечисление.СтатусДокумента.Подписан"));
КонецПроцедуры

&НаСервере
Процедура ПрименитьФильтрыДляЧеловека(ФИОЧеловека, Костыль)
	СписокНовыйДокумент.Отбор.Элементы.Очистить();
	СписокРегистрация.Отбор.Элементы.Очистить();
	СписокНаПодпись.Отбор.Элементы.Очистить();
	СписокВозвращеннНаДоработку.Отбор.Элементы.Очистить();
	СписокПодписан.Отбор.Элементы.Очистить();
	СписокОтказано.Отбор.Элементы.Очистить();

	ГруппаОтбораНовыйДокумент = СписокНовыйДокумент.Отбор.Элементы.Добавить(Тип(
		"ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораНовыйДокумент.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораНовыйДокумент.Использование = Истина;

	Если Костыль Тогда
		ЭлементОтбораОтКогоНовыйДокумент = ГруппаОтбораНовыйДокумент.Элементы.Добавить(Тип(
			"ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораОтКогоНовыйДокумент.Использование = Истина;
		ЭлементОтбораОтКогоНовыйДокумент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
		ЭлементОтбораОтКогоНовыйДокумент.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбораОтКогоНовыйДокумент.ПравоеЗначение = ФИОЧеловека;
	КонецЕсли;

	ЭлементОтбораЛицаКЗадачеНовыйДокумент = ГруппаОтбораНовыйДокумент.Элементы.Добавить(Тип(
		"ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЛицаКЗадачеНовыйДокумент.Использование = Истина;
	ЭлементОтбораЛицаКЗадачеНовыйДокумент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицаКЗадаче.ЛицаПривлеченныеКЗадаче.Наименование");
	ЭлементОтбораЛицаКЗадачеНовыйДокумент.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораЛицаКЗадачеНовыйДокумент.ПравоеЗначение = ФИОЧеловека;
	
	//////////////////////////////////////////////

	ГруппаОтбораРегистрация = СписокРегистрация.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораРегистрация.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораРегистрация.Использование = Истина;

	Если Костыль Тогда
		ЭлементОтбораОтКогоРегистрация = ГруппаОтбораРегистрация.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораОтКогоРегистрация.Использование = Истина;
		ЭлементОтбораОтКогоРегистрация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
		ЭлементОтбораОтКогоРегистрация.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбораОтКогоРегистрация.ПравоеЗначение = ФИОЧеловека;
	КонецЕсли;

	ЭлементОтбораЛицаКЗадачеРегистрация = ГруппаОтбораРегистрация.Элементы.Добавить(Тип(
		"ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЛицаКЗадачеРегистрация.Использование = Истина;
	ЭлементОтбораЛицаКЗадачеРегистрация.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицаКЗадаче.ЛицаПривлеченныеКЗадаче.Наименование");
	ЭлементОтбораЛицаКЗадачеРегистрация.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораЛицаКЗадачеРегистрация.ПравоеЗначение = ФИОЧеловека;
	
	//////////////////////////////////////////////// здесь новое поле

	ГруппаОтбораНаПодпись = СписокНаПодпись.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораНаПодпись.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораНаПодпись.Использование = Истина;

	Если Костыль Тогда
		ЭлементОтбораОтКогоНаПодпись = ГруппаОтбораНаПодпись.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораОтКогоНаПодпись.Использование = Истина;
		ЭлементОтбораОтКогоНаПодпись.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
		ЭлементОтбораОтКогоНаПодпись.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбораОтКогоНаПодпись.ПравоеЗначение = ФИОЧеловека;
	КонецЕсли;

	ЭлементОтбораЛицаКЗадачеНаПодпись = ГруппаОтбораНаПодпись.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЛицаКЗадачеНаПодпись.Использование = Истина;
	ЭлементОтбораЛицаКЗадачеНаПодпись.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицаКЗадаче.ЛицаПривлеченныеКЗадаче.Наименование");
	ЭлементОтбораЛицаКЗадачеНаПодпись.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораЛицаКЗадачеНаПодпись.ПравоеЗначение = ФИОЧеловека;
	
	////////////////////////////////////////////////
	
	
	
	////////////////////////////////////////////////

	ГруппаОтбораВозвращеннНаДоработку = СписокВозвращеннНаДоработку.Отбор.Элементы.Добавить(Тип(
		"ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораВозвращеннНаДоработку.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораВозвращеннНаДоработку.Использование = Истина;

	Если Костыль Тогда
		ЭлементОтбораОтКогоВозвращеннНаДоработку = ГруппаОтбораВозвращеннНаДоработку.Элементы.Добавить(Тип(
			"ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораОтКогоВозвращеннНаДоработку.Использование = Истина;
		ЭлементОтбораОтКогоВозвращеннНаДоработку.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
		ЭлементОтбораОтКогоВозвращеннНаДоработку.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбораОтКогоВозвращеннНаДоработку.ПравоеЗначение = ФИОЧеловека;
	КонецЕсли;

	ЭлементОтбораЛицаКЗадачеВозвращеннНаДоработку = ГруппаОтбораВозвращеннНаДоработку.Элементы.Добавить(Тип(
		"ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЛицаКЗадачеВозвращеннНаДоработку.Использование = Истина;
	ЭлементОтбораЛицаКЗадачеВозвращеннНаДоработку.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицаКЗадаче.ЛицаПривлеченныеКЗадаче.Наименование");
	ЭлементОтбораЛицаКЗадачеВозвращеннНаДоработку.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораЛицаКЗадачеВозвращеннНаДоработку.ПравоеЗначение = ФИОЧеловека;
	
	////////////////////////////////////////////////

	ГруппаОтбораПодписан = СписокПодписан.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораПодписан.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораПодписан.Использование = Истина;

	Если Костыль Тогда
		ЭлементОтбораОтКогоПодписан = ГруппаОтбораПодписан.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораОтКогоПодписан.Использование = Истина;
		ЭлементОтбораОтКогоПодписан.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
		ЭлементОтбораОтКогоПодписан.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбораОтКогоПодписан.ПравоеЗначение = ФИОЧеловека;
	КонецЕсли;

	ЭлементОтбораЛицаКЗадачеПодписан = ГруппаОтбораПодписан.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЛицаКЗадачеПодписан.Использование = Истина;
	ЭлементОтбораЛицаКЗадачеПодписан.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицаКЗадаче.ЛицаПривлеченныеКЗадаче.Наименование");
	ЭлементОтбораЛицаКЗадачеПодписан.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораЛицаКЗадачеПодписан.ПравоеЗначение = ФИОЧеловека;
	
	////////////////////////////////////////////////

	ГруппаОтбораОтказано = СписокОтказано.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораОтказано.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораОтказано.Использование = Истина;

	Если Костыль Тогда
		ЭлементОтбораОтКогоОтказано = ГруппаОтбораОтказано.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораОтКогоОтказано.Использование = Истина;
		ЭлементОтбораОтКогоОтказано.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
		ЭлементОтбораОтКогоОтказано.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбораОтКогоОтказано.ПравоеЗначение = ФИОЧеловека;
	КонецЕсли;

	ЭлементОтбораЛицаКЗадачеОтказано = ГруппаОтбораОтказано.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЛицаКЗадачеОтказано.Использование = Истина;
	ЭлементОтбораЛицаКЗадачеОтказано.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицаКЗадаче.ЛицаПривлеченныеКЗадаче.Наименование");
	ЭлементОтбораЛицаКЗадачеОтказано.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораЛицаКЗадачеОтказано.ПравоеЗначение = ФИОЧеловека;
КонецПроцедуры

&НаСервере
Процедура СоздатьПовторяющиесяДокументы()
	;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Истина", Истина);
	Запрос.Текст = "ВЫБРАТЬ
				   |	Документ.Ссылка КАК Ссылка,
				   |	Документ.ВерсияДанных КАК ВерсияДанных,
				   |	Документ.ПометкаУдаления КАК ПометкаУдаления,
				   |	Документ.Номер КАК Номер,
				   |	Документ.Дата КАК Дата,
				   |	Документ.Наименование КАК Наименование,
				   |	Документ.Выполнена КАК Выполнена,
				   |	Документ.СтатусДокумента КАК СтатусДокумента,
				   |	Документ.ОтКого КАК ОтКого,
				   |	Документ.ДляКого КАК ДляКого,
				   |	Документ.ПланируемаяДатаЗавершения КАК ПланируемаяДатаЗавершения,
				   |	Документ.ДатаФактическогоЗавершения КАК ДатаФактическогоЗавершения,
				   |	Документ.Повторить КАК Повторить,
				   |	Документ.КакЧастоПовторять КАК КакЧастоПовторять,
				   |	Документ.ФайлыКЗадаче.(
				   |		Ссылка КАК Ссылка,
				   |		НомерСтроки КАК НомерСтроки,
				   |		НаименованиеФайла КАК НаименованиеФайла
				   |	) КАК ФайлыКЗадаче,
				   |	Документ.ЛицаКЗадаче.(
				   |		Ссылка КАК Ссылка,
				   |		НомерСтроки КАК НомерСтроки,
				   |		ЛицаПривлеченныеКЗадаче КАК ЛицаПривлеченныеКЗадаче
				   |	) КАК ЛицаКЗадаче,
				   |	Документ.СвязанныеЗадачи.(
				   |		Ссылка КАК Ссылка,
				   |		НомерСтроки КАК НомерСтроки,
				   |		Задачи КАК Задачи
				   |	) КАК СвязанныеЗадачи,
				   |	Документ.ОбсужденияКЗадаче.(
				   |		Ссылка КАК Ссылка,
				   |		НомерСтроки КАК НомерСтроки,
				   |		Сообщение КАК Сообщение,
				   |		Отправитель КАК Отправитель,
				   |		ВремяСоздания КАК ВремяСоздания
				   |	) КАК ОбсужденияКЗадаче,
				   |	Документ.ИсполнителиЗаВесьПериод.(
				   |		Ссылка КАК Ссылка,
				   |		НомерСтроки КАК НомерСтроки,
				   |		Исполнители КАК Исполнители
				   |	) КАК ИсполнителиЗаВесьПериод,
				   |	Документ.Представление КАК Представление
				   |ИЗ
				   |	Задача.Документ КАК Документ
				   |ГДЕ
				   |	Документ.Повторить = &Истина";

	РузультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого ДокументПовторялка Из РузультатЗапроса Цикл
		Если ДокументПовторялка.КакЧастоПовторять = Перечисления.ПериодыПовториения.Ежемесячно Тогда
			РодительскаяПовторялка = Задачи.Документ.НайтиПоНомеру(ДокументПовторялка.Номер);
			ТекДата = Формат(ТекущаяДата(), "ДЛФ = Д") + " 00:00:00";
			ДатаПовторялки = Формат(ДокументПовторялка.ПланируемаяДатаЗавершения, "ДЛФ = Д") + " 00:00:00";
			Если Дата(ДатаПовторялки) < Дата(ТекДата) Тогда
				ПолучитьРодительскаяПовторялка = РодительскаяПовторялка.ПолучитьОбъект();
				ПолучитьРодительскаяПовторялка.Повторить = Ложь;
				ПолучитьРодительскаяПовторялка.Записать();
				НоваяДокумент = Задачи.Документ.СоздатьЗадачу();
				НоваяДокумент.Повторить = Истина;
				НоваяДокумент.КакЧастоПовторять = ДокументПовторялка.КакЧастоПовторять;
				НоваяДокумент.СтатусДокумента = Перечисления.СтатусДокумента.НовыйДокумент;
				НоваяДокумент.Наименование = ДокументПовторялка.Наименование;
				НоваяДокумент.Дата = ТекущаяДата();
				НоваяДокумент.ОтКого = ДокументПовторялка.ОтКого;
				НоваяДокумент.ДляКого = ДокументПовторялка.ДляКого;
				ДобавитьСтрокуВРесурсы = НоваяДокумент.ЛицаКЗадаче.Добавить();
				НоваяДокумент.ЛицаКЗадаче[0].ЛицаПривлеченныеКЗадаче = ДокументПовторялка.ДляКого;
				ДобавитьУчастника = НоваяДокумент.ЛицаКЗадаче.Добавить().ЛицаПривлеченныеКЗадаче
					= ДокументПовторялка.ДляКого;
				НоваяДокумент.ПланируемаяДатаЗавершения = ДокументПовторялка.ПланируемаяДатаЗавершения + 2592000;
				НоваяДокумент.Записать();
			КонецЕсли;
		ИначеЕсли ДокументПовторялка.КакЧастоПовторять = Перечисления.ПериодыПовториения.Ежедневно Тогда
			РодительскаяПовторялка = Задачи.Документ.НайтиПоНомеру(ДокументПовторялка.Номер);
			ТекДата = Формат(ТекущаяДата(), "ДЛФ = Д") + " 00:00:00";
			ДатаПовторялки = Формат(ДокументПовторялка.ПланируемаяДатаЗавершения, "ДЛФ = Д") + " 00:00:00";
			Если Дата(ДатаПовторялки) < Дата(ТекДата) Тогда
				ПолучитьРодительскаяПовторялка = РодительскаяПовторялка.ПолучитьОбъект();
				ПолучитьРодительскаяПовторялка.Повторить = Ложь;
				ПолучитьРодительскаяПовторялка.Записать();
				НоваяДокумент = Задачи.Документ.СоздатьЗадачу();
				НоваяДокумент.Повторить = Истина;
				НоваяДокумент.КакЧастоПовторять = ДокументПовторялка.КакЧастоПовторять;
				НоваяДокумент.СтатусДокумента = Перечисления.СтатусДокумента.НовыйДокумент;
				НоваяДокумент.Наименование = ДокументПовторялка.Наименование;
				НоваяДокумент.Дата = ТекущаяДата();
				НоваяДокумент.ОтКого = ДокументПовторялка.ОтКого;
				НоваяДокумент.ДляКого = ДокументПовторялка.ДляКого;
				ДобавитьСтрокуВРесурсы = НоваяДокумент.ЛицаКЗадаче.Добавить();
				НоваяДокумент.ЛицаКЗадаче[0].ЛицаПривлеченныеКЗадаче = ДокументПовторялка.ДляКого;
				НоваяДокумент.ПланируемаяДатаЗавершения = ДокументПовторялка.ПланируемаяДатаЗавершения + 86400;
				НоваяДокумент.Записать();
			ИначеЕсли ДокументПовторялка.КакЧастоПовторять = Перечисления.ПериодыПовториения.РазВНеделю Тогда
				РодительскаяПовторялка = Задачи.Документ.НайтиПоНомеру(ДокументПовторялка.Номер);
				ТекДата = Формат(ТекущаяДата(), "ДЛФ = Д") + " 00:00:00";
				ДатаПовторялки = Формат(ДокументПовторялка.ПланируемаяДатаЗавершения, "ДЛФ = Д") + " 00:00:00";
				Если Дата(ДатаПовторялки) < Дата(ТекДата) Тогда
					ПолучитьРодительскаяПовторялка = РодительскаяПовторялка.ПолучитьОбъект();
					ПолучитьРодительскаяПовторялка.Повторить = Ложь;
					ПолучитьРодительскаяПовторялка.Записать();
					НоваяДокумент = Задачи.Документ.СоздатьЗадачу();
					НоваяДокумент.Повторить = Истина;
					НоваяДокумент.КакЧастоПовторять = ДокументПовторялка.КакЧастоПовторять;
					НоваяДокумент.СтатусДокумента = Перечисления.СтатусДокумента.НовыйДокумент;
					НоваяДокумент.Наименование = ДокументПовторялка.Наименование;
					НоваяДокумент.Дата = ТекущаяДата();
					НоваяДокумент.ОтКого = ДокументПовторялка.ОтКого;
					НоваяДокумент.ДляКого = ДокументПовторялка.ДляКого;
					ДобавитьСтрокуВРесурсы = НоваяДокумент.ЛицаКЗадаче.Добавить();
					НоваяДокумент.ЛицаКЗадаче[0].ЛицаПривлеченныеКЗадаче = ДокументПовторялка.ДляКого;
					ДобавитьУчастника = НоваяДокумент.ЛицаКЗадаче.Добавить().ЛицаПривлеченныеКЗадаче
						= ДокументПовторялка.ДляКого;
					НоваяДокумент.ПланируемаяДатаЗавершения = ДокументПовторялка.ПланируемаяДатаЗавершения + 604800;
					НоваяДокумент.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТекПол = ИмяПользователя();
	ПрименитьФильтрыДляЧеловека(ИмяПользователя(), Истина);
	СоздатьПовторяющиесяДокументы();
	ОбновлениФормы();
	ПолучитьСообщенияЗадач();
	ПодключитьОбработчикОжидания("ОбновлениФормы", 70, Ложь);
	ПодключитьОбработчикОжидания("ПроверитьУпоминанияВКомментариях", 75, Ложь);
	ПодключитьОбработчикОжидания("ПолучитьСообщенияЗадач", 80, Ложь);
	ПодключитьОбработчикОжидания("УпоминанияВКоментарияхСвязнаяЗадача", 85, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениФормы()
	Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСообщенияЗадач()
	Команда = Неопределено;
	ПроверитьСообщенияКоманда(Команда);
КонецПроцедуры
&НаКлиенте
Процедура Обновить()
	Элементы.СписокНовыйДокумент.Обновить();
	Элементы.СписокРегистрация.Обновить();
	Элементы.СписокВозвращеннНаДоработку.Обновить();
	Элементы.СписокНаПодпись.Обновить();
	Элементы.СписокПодписан.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокДокументов(Команда)
	Обновить();
КонецПроцедуры
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФормуСписка" Тогда
		Обновить();
	КонецЕсли;
КонецПроцедуры






//УведомленияПользователейОНовыхСообщениях

&НаСервере
Функция ПроверитьСообщенияКомандаНаСервере(ИмяТекущегоПользователя)
	ВременноеХранилищеДляФона = ПоместитьВоВременноеХранилище(Неопределено, ЭтотОбъект.УникальныйИдентификатор);
	МассивИмяПолучателяИАдресВХранилище = Новый Массив;
	МассивИмяПолучателяИАдресВХранилище.Добавить(ИмяТекущегоПользователя);
	МассивИмяПолучателяИАдресВХранилище.Добавить(ВременноеХранилищеДляФона);
	ПараметрыПроцедуры = Новый Массив;
	ПараметрыПроцедуры.Добавить(МассивИмяПолучателяИАдресВХранилище);
	Задание = ФоновыеЗадания.Выполнить("СерверПроверитьСообщенияВызовСервера.ПроверитьСообщенияВЦикле",
		ПараметрыПроцедуры, Строка(Новый УникальныйИдентификатор), ВременноеХранилищеДляФона);
	Задание = Задание.ОжидатьЗавершенияВыполнения();
	Возврат ПолучитьИзВременногоХранилища(Задание.Наименование);
	УдалитьИзВременногоХранилища(Задание.Наименование);
КонецФункции

&НаКлиенте
Асинх Процедура ПроверитьСообщенияКоманда(Команда)
	ИмяТекущегоПользователя = ИмяПользователя();
	СообщенияВДокументх = Ждать ПроверитьСообщенияКомандаНаСервере(ИмяТекущегоПользователя);
	Для Каждого УведомляемПользователя Из СообщенияВДокументх Цикл
		ДокументСсылка = УведомляемПользователя.НавСсылка;
		НавигационаяСсылка = ДокументСсылка;
		ПоказатьОповещениеПользователя("Новое сообщение от : " + УведомляемПользователя.Отправитель + Символы.ПС
			+ "В документе: " + УведомляемПользователя.НомерЗадачи, НавигационаяСсылка,
			УведомляемПользователя.ТекстСообщения, БиблиотекаКартинок.Информация, СтатусОповещенияПользователя.Важное,
			Новый УникальныйИдентификатор);
	КонецЦикла;
КонецПроцедуры

//УведомленияПользователейОНовыхСообщениях






//УведомленияПользователейОбУпоминанияхВПереписке

&НаКлиенте
Процедура ПроверитьУпоминанияВКомментариях()
	ИмяТекущегоПользователя = ИмяПользователя();
	СообщенияВДокументхУпоминания = ПроверитьУпоминанияВКомментарияхНаСервере(ИмяТекущегоПользователя);
	Для Каждого УведомляемПользователя Из СообщенияВДокументхУпоминания Цикл
		Если УведомляемПользователя.СообщенияДляУведоления = "" Тогда
			ДокументСсылка = УведомляемПользователя.НавСсылка;
			НавигационаяСсылка = ДокументСсылка;
			ПоказатьОповещениеПользователя(УведомляемПользователя.Отправитель + " упомянул Вас в комментариях."
				+ Символы.ПС + "Документ: " + УведомляемПользователя.НомерДокумента, НавигационаяСсылка,
				УведомляемПользователя.ВремяУпоминания, БиблиотекаКартинок.Информация,
				СтатусОповещенияПользователя.Важное, Новый УникальныйИдентификатор);
		ИначеЕсли УведомляемПользователя.СообщенияДляУведоления <> "" Тогда
			ДокументСсылка = УведомляемПользователя.НавСсылка;
			НавигационаяСсылка = ДокументСсылка;
			ПоказатьОповещениеПользователя(УведомляемПользователя.Отправитель + Символы.ПС
				+ УведомляемПользователя.СообщенияДляУведоления + Символы.ПС + "Документ: "
				+ УведомляемПользователя.НомерДокумента, НавигационаяСсылка, УведомляемПользователя.ВремяУпоминания,
				БиблиотекаКартинок.Информация, СтатусОповещенияПользователя.Важное, Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//уведомления о новых задачах
&НаКлиенте
Процедура УпоминанияВКоментарияхСвязнаяЗадача()
	ИмяТекущегоПользователя = ИмяПользователя();
	СообщенияВДокументхУпоминания = ПроверитьУпоминанияВКоментарияхСвязнаяЗадачаНаСервере(ИмяТекущегоПользователя);
	Для Каждого УведомляемПользователя Из СообщенияВДокументхУпоминания Цикл
		Если УведомляемПользователя.СообщенияДляУведоления = "" Тогда
			ДокументСсылка = УведомляемПользователя.НавСсылка;
			НавигационаяСсылка = ДокументСсылка;
			ПоказатьОповещениеПользователя(УведомляемПользователя.Отправитель + " упомянул Вас в комментариях."
				+ Символы.ПС + "Документ: " + УведомляемПользователя.НомерДокумента, НавигационаяСсылка,
				УведомляемПользователя.ВремяУпоминания, БиблиотекаКартинок.Информация,
				СтатусОповещенияПользователя.Важное, Новый УникальныйИдентификатор);
		ИначеЕсли УведомляемПользователя.СообщенияДляУведоления <> "" Тогда
			ДокументСсылка = УведомляемПользователя.НавСсылка;
			НавигационаяСсылка = ДокументСсылка;
			ПоказатьОповещениеПользователя(УведомляемПользователя.Отправитель + Символы.ПС
				+ УведомляемПользователя.СообщенияДляУведоления + Символы.ПС + "Документ: "
				+ УведомляемПользователя.НомерДокумента, НавигационаяСсылка, УведомляемПользователя.ВремяУпоминания,
				БиблиотекаКартинок.Информация, СтатусОповещенияПользователя.Важное, Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьУпоминанияВКоментарияхСвязнаяЗадачаНаСервере(ИмяТекущегоПользователя)
	МассивСтруктур = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПользователя", ИмяТекущегоПользователя);
	Запрос.УстановитьПараметр("Ложь", Ложь);
	Запрос.Текст = "ВЫБРАТЬ
				   |	УпоминанияВКоментарияхСвязнаяЗадача.Период КАК Период,
				   |	УпоминанияВКоментарияхСвязнаяЗадача.ВремяОтправления КАК ВремяОтправления,
				   |	УпоминанияВКоментарияхСвязнаяЗадача.ПолучательИзмерение КАК ПолучательИзмерение,
				   |	УпоминанияВКоментарияхСвязнаяЗадача.СвязнаяЗадача КАК СвязнаяЗадача,
				   |	УпоминанияВКоментарияхСвязнаяЗадача.СтатусДоставки КАК СтатусДоставки,
				   |	УпоминанияВКоментарияхСвязнаяЗадача.Отправитель КАК Отправитель,
				   |	УпоминанияВКоментарияхСвязнаяЗадача.Получатель КАК Получатель,
				   |	УпоминанияВКоментарияхСвязнаяЗадача.СсылкаНаДокумент КАК СсылкаНаДокумент,
				   |	УпоминанияВКоментарияхСвязнаяЗадача.НомерДокумента КАК НомерДокумента,
				   |	УпоминанияВКоментарияхСвязнаяЗадача.СообщенияДляУведоления КАК СообщенияДляУведоления
				   |ИЗ
				   |	РегистрСведений.УпоминанияВКоментарияхСвязнаяЗадача КАК УпоминанияВКоментарияхСвязнаяЗадача
				   |ГДЕ
				   |	УпоминанияВКоментарияхСвязнаяЗадача.СтатусДоставки = &Ложь";

	РузультатЗапроса = Запрос.Выполнить().Выгрузить();

	Для Каждого СообщенияВДокументх Из РузультатЗапроса Цикл
		Если СообщенияВДокументх.Получатель = ИмяТекущегоПользователя Тогда
			СтруктураУпоминанийВДокументах = Новый Структура;
			СтруктураУпоминанийВДокументах.Вставить("Отправитель", СообщенияВДокументх.Отправитель);
			СтруктураУпоминанийВДокументах.Вставить("Получатель", СообщенияВДокументх.Получатель);
			СтруктураУпоминанийВДокументах.Вставить("НавСсылка", СообщенияВДокументх.СсылкаНаДокумент);
			СтруктураУпоминанийВДокументах.Вставить("НомерДокумента", СообщенияВДокументх.НомерДокумента);
			СтруктураУпоминанийВДокументах.Вставить("ВремяУпоминания", СообщенияВДокументх.ВремяОтправления);

			СтруктураУпоминанийВДокументах.Вставить("СообщенияДляУведоления",
				СообщенияВДокументх.СообщенияДляУведоления);
			МассивСтруктур.Добавить(СтруктураУпоминанийВДокументах);
			
			//тут просто удаляею запись в регистре.

			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Получатель", СообщенияВДокументх.Получатель);
			Выбор = РегистрыСведений.УпоминанияВКоментарияхСвязнаяЗадача.Выбрать(СообщенияВДокументх.Период,
				ТекущаяДата() + 86400, СтруктураОтбора);
			Пока Выбор.Следующий() Цикл
				ЭлементОбходаВыбор = Выбор;
				ЭлементОбходаВыбор.ПолучитьМенеджерЗаписи().Удалить();

			КонецЦикла;

		КонецЕсли;
	КонецЦикла;

	Возврат МассивСтруктур;
КонецФункции
//уведомления о новых задачах
&НаСервереБезКонтекста
Функция ПроверитьУпоминанияВКомментарияхНаСервере(ИмяТекущегоПользователя)
	МассивСтруктур = Новый Массив;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПользователя", ИмяТекущегоПользователя);
	Запрос.УстановитьПараметр("Ложь", Ложь);
	Запрос.Текст = "ВЫБРАТЬ
				   |	УпоминанияВКоментарияхДокумента.Период КАК Период,
				   |	УпоминанияВКоментарияхДокумента.ВремяОтправления КАК ВремяОтправления,
				   |	УпоминанияВКоментарияхДокумента.ПолучательИзмерение КАК ПолучательИзмерение,
				   |	УпоминанияВКоментарияхДокумента.СтатусИзменерение КАК СтатусИзменерение,
				   |	УпоминанияВКоментарияхДокумента.СтатусДоставки КАК СтатусДоставки,
				   |	УпоминанияВКоментарияхДокумента.Отправитель КАК Отправитель,
				   |	УпоминанияВКоментарияхДокумента.Получатель КАК Получатель,
				   |	УпоминанияВКоментарияхДокумента.СсылкаНаДокумент КАК СсылкаНаДокумент,
				   |	УпоминанияВКоментарияхДокумента.НомерДокумента КАК НомерДокумента,
				   |	УпоминанияВКоментарияхДокумента.СообщенияДляУведоления КАК СообщенияДляУведоления
				   |ИЗ
				   |	РегистрСведений.УпоминанияВКоментарияхДокумента КАК УпоминанияВКоментарияхДокумента
				   |ГДЕ
				   |	УпоминанияВКоментарияхДокумента.СтатусДоставки = &Ложь";

	РузультатЗапроса = Запрос.Выполнить().Выгрузить();

	Для Каждого СообщенияВДокументх Из РузультатЗапроса Цикл
		Если СообщенияВДокументх.Получатель = ИмяТекущегоПользователя Тогда
			СтруктураУпоминанийВДокументах = Новый Структура;
			СтруктураУпоминанийВДокументах.Вставить("Отправитель", СообщенияВДокументх.Отправитель);
			СтруктураУпоминанийВДокументах.Вставить("Получатель", СообщенияВДокументх.Получатель);
			СтруктураУпоминанийВДокументах.Вставить("НавСсылка", СообщенияВДокументх.СсылкаНаДокумент);
			СтруктураУпоминанийВДокументах.Вставить("НомерДокумента", СообщенияВДокументх.НомерДокумента);
			СтруктураУпоминанийВДокументах.Вставить("ВремяУпоминания", СообщенияВДокументх.ВремяОтправления);

			СтруктураУпоминанийВДокументах.Вставить("СообщенияДляУведоления",
				СообщенияВДокументх.СообщенияДляУведоления);
			МассивСтруктур.Добавить(СтруктураУпоминанийВДокументах);
			
			//тут просто удаляею запись в регистре.

			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Получатель", СообщенияВДокументх.Получатель);
			Выбор = РегистрыСведений.УпоминанияВКоментарияхДокумента.Выбрать(СообщенияВДокументх.Период, ТекущаяДата()
				+ 86400, СтруктураОтбора);
			Пока Выбор.Следующий() Цикл
				ЭлементОбходаВыбор = Выбор;
				ЭлементОбходаВыбор.ПолучитьМенеджерЗаписи().Удалить();

			КонецЦикла;

		КонецЕсли;
	КонецЦикла;

	Возврат МассивСтруктур;
КонецФункции


//открыть общий список документов
&НаКлиенте
Процедура ОткрытьОбщийСписокКоманда(Команда)
	ОткрытьФорму("Задача.Документ.Форма.ФормаСпискаОбщаяДокументы");
КонецПроцедуры

//открыть общий список документов




























