
&НаКлиенте
Процедура ОбсужденияКЗадачеСообщениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ппп = Объект.ЛицаКЗадаче;
	Для каждого ее Из ппп Цикл
		ее.ПросмотренноЛицаКЗадаче = Ложь;
		
		
		
	КонецЦикла;		
КонецПроцедуры




&НаКлиенте
Процедура ОбсужденияКЗадачеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.ВремяСоздания = ТекущаяДата();
		
	КонецЕсли;
	Элемент.ТекущиеДанные.Отправитель =  ИмяПользователя();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбсужденияКЗадачеПриИзменении(Элемент)
	Элементы.ОбсужденияКЗадаче.Обновить();
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	Если ИмяПользователя() <> Объект.ОтКого  Тогда
		ЭтотОбъект.Элементы.ДляКого.ТолькоПросмотр = Истина;
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПовторитьПриИзменении(Неопределено);
	Если ПустаяСтрока(Объект.ОтКого) Тогда
		Объект.ОтКого = ИмяПользователя();
	КонецЕсли;
	ПриОткрытииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Оповестить("ОбновитьФормуСписка");	
КонецПроцедуры

&НаКлиенте
Процедура ДляКогоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Руководитель = Объект.ЛицаКЗадаче.Вставить(0);
	Руководитель.ЛицаПривлеченныеКЗадаче = ВыбранноеЗначение;
	Человек = Объект.ИсполнителиЗаВесьПериод.Добавить();
	Человек.Исполнители = ВыбранноеЗначение;
КонецПроцедуры

&НаСервере
Процедура ЗавершитьВсеСвязанныеЗадачиНаСервере()
	Для Каждого Строка Из Объект.СвязанныеЗадачи.Выгрузить() Цикл
		Задача = Строка.Задачи.ПолучитьОбъект();
		Если Задача.СтатусЗадачи <> Перечисления.СтатусЗадачи.Готово Тогда
			Задача.СтатусЗадачи = Перечисления.СтатусЗадачи.Готово;
			Задача.Выполнена = Истина;
			Задача.ДатаФактическогоЗавершения = ТекущаяДата();
			Задача.Записать();
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВсеСвязанныеЗадачи(Команда)
	ЗавершитьВсеСвязанныеЗадачиНаСервере();
	ОбновитьИнтерфейс();	
КонецПроцедуры

&НаСервере
Процедура СтатусЗадачиПриИзмененииНаСервере()
	Если Объект.СтатусЗадачи = Перечисления.СтатусЗадачи.Готово Тогда
		Объект.Выполнена = Истина;
		Объект.ДатаФактическогоЗавершения = ТекущаяДата();
		Объект.ФактическиЗатраченноеВремя = (Объект.ДатаФактическогоЗавершения - Объект.Дата)/60/60;
	Иначе
		Объект.Выполнена = Ложь;
		Объект.ДатаФактическогоЗавершения = Ложь;
		Объект.ФактическиЗатраченноеВремя = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЛицаКЗадачеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока Тогда
		Исполнитель = Объект.ЛицаКЗадаче.Получить(Объект.ЛицаКЗадаче.Количество() - 1);
		Человек = Объект.ИсполнителиЗаВесьПериод.Добавить();
		Человек.Исполнители = Исполнитель.ЛицаПривлеченныеКЗадаче;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗадачиПриИзменении()
	СтатусЗадачиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицаКЗадачеПередУдалением(Элемент, Отказ)
	// чтобы работало, нужно запретить множественный выбор
	Если Элемент.ТекущиеДанные.ЛицаПривлеченныеКЗадаче = Объект.ДляКого Тогда
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура ПовторитьПриИзменении(Элемент)
	ПроверитьТест = Объект.Повторить;
	Если ПроверитьТест = Истина Тогда
		Элементы.КакЧасто.Видимость = Истина;
	Иначе
		Элементы.КакЧасто.Видимость = Ложь;  
		
		
	КонецЕсли;
КонецПроцедуры

//Конемады файлов загрузки


&НаСервере
Процедура ВыбратьФайлыКомандаНаСервере(АдресВоВременномХранилище)
	
	ТекПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	ИдПользователя = ТекПользователь.Имя;
	НомерЗадачи = Объект.Номер;
	ИмяКаталога = "C:\1CFilesToTask\" + Строка(ИдПользователя) + "_" + "Номер задачи_" + НомерЗадачи + "\";
	КаталогПользователя = Новый Файл(ИмяКаталога);
	Если Не КаталогПользователя.Существует() Тогда
		СоздатьКаталог(КаталогПользователя);
	КонецЕсли;       
	
	Для Каждого ФайлаИзМассива Из АдресВоВременномХранилище Цикл
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ФайлаИзМассива.Значение);
		
		ИмяФайла =  ФайлаИзМассива.Представление;
		ПолноеИмяФайла = "C:\1CFilesToTask\" + Строка(ИдПользователя) + "_" + "Номер задачи_" + НомерЗадачи + "\" + ИмяФайла;
		ФайлВФС = Новый Файл(ПолноеИмяФайла); 
		
		Если ФайлВФС.Существует() Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = ("Такой файл уже существует");
			Сообщение.Сообщить();
		Иначе
			//задача
			НовыйОбъект = Объект.ФайлыКЗадаче.Добавить();
			НовыйОбъект.ДатаДобавления = ТекущаяДата();
			НовыйОбъект.НаименованиеФайла = ИмяФайла;
			НовыйОбъект.СсылкаАдрес = ПолноеИмяФайла;
			
			//НовыйОбъект.Записать();
			ДвоичныеДанные.Записать(ПолноеИмяФайла);
			УдалитьИзВременногоХранилища(ФайлаИзМассива.Значение);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры




&НаКлиенте
Async Procedure ВыбратьФайлыКомандаЗадачи(Команда)
	ДиалогВыбораФайла = New PutFilesDialogParameters;
	ДиалогВыбораФайла.MultipleChoice = True;
	СостояниеЗагрузкиФайла = New CallbackDescription("СостояниеЗагрузкиФайла", ЭтотОбъект);
	ПомещениеВВременноеХранилище = New  CallbackDescription("ПомещениеВВременноеХранилище",ЭтотОбъект);
	ФайлВВременномХранилище = Await PutFilesToServerAsync(СостояниеЗагрузкиФайла,ПомещениеВВременноеХранилище,ДиалогВыбораФайла,);
	
	Если Команда.Имя = "ВыбратьФайлыКомандаЗадачи" Тогда 
		Notify("ФайлыЗагруженыЗадача",ФайлВВременномХранилище);
	Иначе
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеВВременноеХранилище(ПомещаемыеФайлы, ОтказОтПомещенияВсехФайлов, ДополнительныеПараметры) Экспорт
	Если ПомещаемыеФайлы[0].Размер() > 14195260  Тогда
		ОтказОтПомещенияВсехФайлов = Истина;
		ПоказатьОповещениеПользователя("Извините, но файл слишком большой для передачи",,,БиблиотекаКартинок.Документ,СтатусОповещенияПользователя.Информация,);
		
	КонецЕсли;
	Для Каждого ФайлаВМассива Из ПомещаемыеФайлы Цикл
		РазмерФайла = ФайлаВМассива.Размер();
		
		ДоляНаПроцент = РазмерФайла / 100;
		Шаг = ДоляНаПроцент; 
		Для  Нач = 2 По 100 Цикл
			Если РазмерФайла > 14195260 Тогда
				Прервать;
			КонецЕсли;
			
			Шаг = Шаг + ДоляНаПроцент;
			Состояние("Подготовка файла",Нач,,БиблиотекаКартинок.Документ);
			
		КонецЦикла; 
	КонецЦикла;
	
	
	
	
КонецПроцедуры


&НаКлиенте
Процедура СостояниеЗагрузкиФайла(ПомещаемыйФайл, Помещено, ОтказОтПомещенияФайла, ПомещеноВсего, ОтказОтПомещенияВсехФайлов, ДополнительныеПараметры) Экспорт
	Состояние("Загрузка на сервер" + Символы.ПС + ПомещаемыйФайл.Имя, Помещено, "Размер =" + ПомещаемыйФайл.Размер(), БиблиотекаКартинок.Документ);	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	СписокАдресовФайлов = Новый СписокЗначений;
	Если ИмяСобытия = "ФайлыЗагруженыЗадача" Тогда
		Для Каждого АдресФайлаВХ Из Параметр Цикл
			СписокАдресовФайлов.Добавить(АдресФайлаВХ.Адрес, АдресФайлаВХ.СсылкаНаФайл.Имя);
		КонецЦикла;		
	КонецЕсли;
	ВыбратьФайлыКомандаНаСервере(СписокАдресовФайлов);	
	
КонецПроцедуры

//кнопка скачивания файлов
&НаСервере
Функция СкачатьФалыКомандаНаСервере(АдресФайла)
	ЗапрашиваемыйФайл = Новый Файл(АдресФайла);   
	Возврат  ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ЗапрашиваемыйФайл.ПолноеИмя), ЭтотОбъект.УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Асинх Процедура СкачатьФалыКоманда(Команда)
	АдресВыбранногоФайла = Элементы.ФайлыКЗадаче.ТекущиеДанные;
	АдресВХранилище = СкачатьФалыКомандаНаСервере(АдресВыбранногоФайла.СсылкаАдрес);
	ЖдемФайлыССервера = Ждать ПолучитьФайлССервераАсинх(АдресВХранилище,АдресВыбранногоФайла.НаименованиеФайла, Новый ПараметрыДиалогаПолученияФайлов);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбсужденияКЗадачеСообщениеОкончаниеВводаТекстаНаСервере(ДатаСообщения)
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.СвязаннаСДокументом) И Объект.ПривязанаКДокументу = Ложь Тогда
		Объект.ПривязанаКДокументу = Истина;
		Notify("ДобавленнаСвязнаяЗадачаКДокументу",Объект.Ссылка);
	Иначе
	КонецЕсли;
	
	
КонецПроцедуры

















