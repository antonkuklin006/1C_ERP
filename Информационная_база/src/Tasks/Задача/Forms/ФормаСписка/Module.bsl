
&НаСервереБезКонтекста
Процедура ОбновитьСтатусЗадачи(МассивЗадач, НовыйСтатус) 
	Для каждого ТекЗадача Из МассивЗадач Цикл
		ЗадачаОбъект = ТекЗадача.ПолучитьОбъект(); 
		
		Если ЗадачаОбъект.СтатусЗадачи = НовыйСтатус Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗадачаОбъект.СтатусЗадачи = НовыйСтатус;
		
		Если НовыйСтатус = Перечисления.СтатусЗадачи.Готово Тогда
			
			Для Каждого Строка Из ЗадачаОбъект.СвязанныеЗадачи.Выгрузить() Цикл
				Если Строка.Задачи.СтатусЗадачи <> Перечисления.СтатусЗадачи.Готово Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтрШаблон("Нельзя завершить задачу: %1					                                                 
					|Пока не выполнена задача 
					|%2" 
					, ЗадачаОбъект.Ссылка,Строка.Задачи.Ссылка);			 	
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли;	
			КонецЦикла;
			
			ЗадачаОбъект.Выполнена = Истина;
			ЗадачаОбъект.ДатаФактическогоЗавершения = ТекущаяДата();	
		Иначе
			ЗадачаОбъект.Выполнена = Ложь;
			ЗадачаОбъект.ДатаФактическогоЗавершения = Ложь;
		КонецЕсли;
		
		Попытка
			ЗадачаОбъект.Записать();
		Исключение 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не получилось поменять СтатусЗадачи.Сорян, Бро! Зови админа" + ТекЗадача + "потому что: " + ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыЗадачКлиент(МассивЗадач, НовыйСтатус)
	Если ТипЗнч(МассивЗадач) = Тип("Массив") Тогда 
		ОбновитьСтатусЗадачи(МассивЗадач, НовыйСтатус);
	КонецЕсли;
	Обновить();
	//ПосчитатьКоличествоНевыполненных();	
КонецПроцедуры 

&НаКлиенте
Процедура СписокНовыеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОбновитьСтатусыЗадачКлиент(ПараметрыПеретаскивания.Значение, ПредопределенноеЗначение("Перечисление.СтатусЗадачи.Новая"));
	//МассивЗадач = ПараметрыПеретаскивания.Значения;
	//Если ТипЗнч(МассивЗадач) = Тип("Массив") Тогда 
	//	ОбновитьСтатусЗадачи(МассивЗадач, ПредопределенноеЗначение("Перечисление.СтатусЗадачи.Новая"));
	//КонецЕсли;
	//ОповеститьОбИзменении(Тип("ЗадачаСсылка.Задача"));
КонецПроцедуры

&НаКлиенте
Процедура СписокВРаботеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОбновитьСтатусыЗадачКлиент(ПараметрыПеретаскивания.Значение, ПредопределенноеЗначение("Перечисление.СтатусЗадачи.ВРаботе"));
	//МассивЗадач = ПараметрыПеретаскивания.Значения;
	//Если ТипЗнч(МассивЗадач) = Тип("Массив") Тогда 
	//	ОбновитьСтатусЗадачи(МассивЗадач, ПредопределенноеЗначение("Перечисление.СтатусЗадачи.ВРаботе"));
	//КонецЕсли;
	//ОповеститьОбИзменении(Тип("ЗадачаСсылка.Задача"));
КонецПроцедуры

&НаКлиенте
Процедура СписокТребуетПроверкиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОбновитьСтатусыЗадачКлиент(ПараметрыПеретаскивания.Значение, ПредопределенноеЗначение("Перечисление.СтатусЗадачи.ТребуетПроверки"));
	//МассивЗадач = ПараметрыПеретаскивания.Значения;
	//Если ТипЗнч(МассивЗадач) = Тип("Массив") Тогда 
	//	ОбновитьСтатусЗадач(МассивЗадач, ПредопределенноеЗначение("Перечисление.СтатусЗадачи.ВозращеннаНаДоработку"));
	//КонецЕсли;
	//ОповеститьОбИзменении(Тип("ЗадачаСсылка.Задача"));
КонецПроцедуры


&НаКлиенте
Процедура СписокВозращеннаНаДоработкуПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОбновитьСтатусыЗадачКлиент(ПараметрыПеретаскивания.Значение, ПредопределенноеЗначение("Перечисление.СтатусЗадачи.ВозращеннаНаДоработку"));
	//МассивЗадач = ПараметрыПеретаскивания.Значения;
	//Если ТипЗнч(МассивЗадач) = Тип("Массив") Тогда 
	//	ОбновитьСтатусЗадач(МассивЗадач, ПредопределенноеЗначение("Перечисление.СтатусЗадачи.ВозращеннаНаДоработку"));
	//КонецЕсли;
	//ОповеститьОбИзменении(Тип("ЗадачаСсылка.Задача"));
КонецПроцедуры



&НаКлиенте
Процедура СписокГотовоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОбновитьСтатусыЗадачКлиент(ПараметрыПеретаскивания.Значение, ПредопределенноеЗначение("Перечисление.СтатусЗадачи.Готово"));
	//МассивЗадач = ПараметрыПеретаскивания.Значения;
	//Если ТипЗнч(МассивЗадач) = Тип("Массив") Тогда 
	//	ОбновитьСтатусЗадач(МассивЗадач, ПредопределенноеЗначение("Перечисление.СтатусЗадачи.Готово"));
	//КонецЕсли;
	//ОповеститьОбИзменении(Тип("ЗадачаСсылка.Задача"));
КонецПроцедуры

&НаСервере
Процедура ПрименитьФильтрыДляЧеловека(ФИОЧеловека, Костыль)
	СписокНовые.Отбор.Элементы.Очистить();	
	СписокВРаботе.Отбор.Элементы.Очистить();
	СписокТребуетПроверки.Отбор.Элементы.Очистить();
	СписокВозращеннаНаДоработку.Отбор.Элементы.Очистить();
	СписокГотово.Отбор.Элементы.Очистить();
	
	ГруппаОтбораНовые = СписокНовые.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораНовые.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораНовые.Использование = Истина;
	
	Если Костыль Тогда	
		ЭлементОтбораОтКогоНовые = ГруппаОтбораНовые.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораОтКогоНовые.Использование = Истина;
		ЭлементОтбораОтКогоНовые.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
		ЭлементОтбораОтКогоНовые.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбораОтКогоНовые.ПравоеЗначение = ФИОЧеловека;
	КонецЕсли;
	
	ЭлементОтбораЛицаКЗадачеНовые = ГруппаОтбораНовые.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЛицаКЗадачеНовые.Использование = Истина;
	ЭлементОтбораЛицаКЗадачеНовые.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицаКЗадаче.ЛицаПривлеченныеКЗадаче.Наименование");
	ЭлементОтбораЛицаКЗадачеНовые.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораЛицаКЗадачеНовые.ПравоеЗначение = ФИОЧеловека;
	
	//////////////////////////////////////////////
	
	ГруппаОтбораВРаботе = СписокВРаботе.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораВРаботе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораВРаботе.Использование = Истина;
	
	Если Костыль Тогда
		ЭлементОтбораОтКогоВРаботе = ГруппаОтбораВРаботе.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораОтКогоВРаботе.Использование = Истина;
		ЭлементОтбораОтКогоВРаботе.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
		ЭлементОтбораОтКогоВРаботе.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбораОтКогоВРаботе.ПравоеЗначение = ФИОЧеловека;	
	КонецЕсли;
	
	ЭлементОтбораЛицаКЗадачеВРаботе = ГруппаОтбораВРаботе.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЛицаКЗадачеВРаботе.Использование = Истина;
	ЭлементОтбораЛицаКЗадачеВРаботе.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицаКЗадаче.ЛицаПривлеченныеКЗадаче.Наименование");
	ЭлементОтбораЛицаКЗадачеВРаботе.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораЛицаКЗадачеВРаботе.ПравоеЗначение = ФИОЧеловека;
	
	//////////////////////////////////////////////// здесь новое поле
	
	ГруппаОтбораТребуетПроверки = СписокТребуетПроверки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораТребуетПроверки.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораТребуетПроверки.Использование = Истина;
	
	Если Костыль Тогда	
		ЭлементОтбораОтКогоТребуетПроверки = ГруппаОтбораТребуетПроверки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораОтКогоТребуетПроверки.Использование = Истина;
		ЭлементОтбораОтКогоТребуетПроверки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
		ЭлементОтбораОтКогоТребуетПроверки.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбораОтКогоТребуетПроверки.ПравоеЗначение = ФИОЧеловека;	
	КонецЕсли;
	
	ЭлементОтбораЛицаКЗадачеТребуетПроверки = ГруппаОтбораТребуетПроверки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЛицаКЗадачеТребуетПроверки.Использование = Истина;
	ЭлементОтбораЛицаКЗадачеТребуетПроверки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицаКЗадаче.ЛицаПривлеченныеКЗадаче.Наименование");
	ЭлементОтбораЛицаКЗадачеТребуетПроверки.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораЛицаКЗадачеТребуетПроверки.ПравоеЗначение = ФИОЧеловека;
	
	////////////////////////////////////////////////
	
	
	
	////////////////////////////////////////////////
	
	ГруппаОтбораВозращеннаНаДоработку = СписокВозращеннаНаДоработку.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораВозращеннаНаДоработку.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораВозращеннаНаДоработку.Использование = Истина;
	
	Если Костыль Тогда	
		ЭлементОтбораОтКогоВозращеннаНаДоработку = ГруппаОтбораВозращеннаНаДоработку.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораОтКогоВозращеннаНаДоработку.Использование = Истина;
		ЭлементОтбораОтКогоВозращеннаНаДоработку.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
		ЭлементОтбораОтКогоВозращеннаНаДоработку.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбораОтКогоВозращеннаНаДоработку.ПравоеЗначение = ФИОЧеловека;	
	КонецЕсли;
	
	ЭлементОтбораЛицаКЗадачеВозращеннаНаДоработку = ГруппаОтбораВозращеннаНаДоработку.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЛицаКЗадачеВозращеннаНаДоработку.Использование = Истина;
	ЭлементОтбораЛицаКЗадачеВозращеннаНаДоработку.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицаКЗадаче.ЛицаПривлеченныеКЗадаче.Наименование");
	ЭлементОтбораЛицаКЗадачеВозращеннаНаДоработку.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораЛицаКЗадачеВозращеннаНаДоработку.ПравоеЗначение = ФИОЧеловека;
	
	////////////////////////////////////////////////
	
	ГруппаОтбораГотово = СписокГотово.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораГотово.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбораГотово.Использование = Истина;
	
	Если Костыль Тогда
		ЭлементОтбораОтКогоГотово = ГруппаОтбораГотово.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораОтКогоГотово.Использование = Истина;
		ЭлементОтбораОтКогоГотово.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
		ЭлементОтбораОтКогоГотово.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбораОтКогоГотово.ПравоеЗначение = ФИОЧеловека;
	КонецЕсли;
	
	ЭлементОтбораЛицаКЗадачеГотово = ГруппаОтбораГотово.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораЛицаКЗадачеГотово.Использование = Истина;
	ЭлементОтбораЛицаКЗадачеГотово.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЛицаКЗадаче.ЛицаПривлеченныеКЗадаче.Наименование");
	ЭлементОтбораЛицаКЗадачеГотово.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораЛицаКЗадачеГотово.ПравоеЗначение = ФИОЧеловека;	
КонецПроцедуры

&НаСервере
Процедура СоздатьПовторяющиесяЗадачи();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Истина",Истина);
	Запрос.Текст = 	"ВЫБРАТЬ
	|	Задача.Ссылка КАК Ссылка,
	|	Задача.ВерсияДанных КАК ВерсияДанных,
	|	Задача.ПометкаУдаления КАК ПометкаУдаления,
	|	Задача.Номер КАК Номер,
	|	Задача.Дата КАК Дата,
	|	Задача.Наименование КАК Наименование,
	|	Задача.Выполнена КАК Выполнена,
	|	Задача.СтатусЗадачи КАК СтатусЗадачи,
	|	Задача.ОтКого КАК ОтКого,
	|	Задача.ДляКого КАК ДляКого,
	|	Задача.ПланируемаяДатаЗавершения КАК ПланируемаяДатаЗавершения,
	|	Задача.ДатаФактическогоЗавершения КАК ДатаФактическогоЗавершения,
	|	Задача.Отдел КАК Отдел,
	|	Задача.Повторить КАК Повторить,
	|	Задача.КакЧастоПовторять КАК КакЧастоПовторять,
	|	Задача.ФайлыКЗадаче.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		НаименованиеФайла КАК НаименованиеФайла
	|	) КАК ФайлыКЗадаче,
	|	Задача.ЛицаКЗадаче.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		ЛицаПривлеченныеКЗадаче КАК ЛицаПривлеченныеКЗадаче
	|	) КАК ЛицаКЗадаче,
	|	Задача.СвязанныеЗадачи.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Задачи КАК Задачи
	|	) КАК СвязанныеЗадачи,
	|	Задача.ОбсужденияКЗадаче.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Сообщение КАК Сообщение,
	|		Отправитель КАК Отправитель,
	|		ВремяСоздания КАК ВремяСоздания
	|	) КАК ОбсужденияКЗадаче,
	|	Задача.ИсполнителиЗаВесьПериод.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Исполнители КАК Исполнители
	|	) КАК ИсполнителиЗаВесьПериод,
	|	Задача.Представление КАК Представление
	|ИЗ
	|	Задача.Задача КАК Задача
	|ГДЕ
	|	Задача.Повторить = &Истина";
	
	РузультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого ЗадачаПовторялка Из РузультатЗапроса Цикл
		Если ЗадачаПовторялка.КакЧастоПовторять = Перечисления.ПериодыПовториения.Ежемесячно Тогда
			РодительскаяПовторялка = Задачи.Задача.НайтиПоНомеру(ЗадачаПовторялка.Номер);
			Если Формат(ЗадачаПовторялка.ПланируемаяДатаЗавершения, "ДЛФ = Д") < Формат(ТекущаяДата(), "ДЛФ = Д") Тогда 
				ПолучитьРодительскаяПовторялка = РодительскаяПовторялка.ПолучитьОбъект();
				ПолучитьРодительскаяПовторялка.Повторить = Ложь;
				ПолучитьРодительскаяПовторялка.Записать();
				НоваяЗадача = Задачи.Задача.СоздатьЗадачу();
				НоваяЗадача.Повторить = Истина;
				НоваяЗадача.КакЧастоПовторять = ЗадачаПовторялка.КакЧастоПовторять;
				НоваяЗадача.СтатусЗадачи = Перечисления.СтатусЗадачи.Новая; 
				НоваяЗадача.Наименование = ЗадачаПовторялка.Наименование;
				НоваяЗадача.Дата = ТекущаяДата(); 
				НоваяЗадача.ОтКого = ЗадачаПовторялка.ОтКого; 
				НоваяЗадача.ДляКого = ЗадачаПовторялка.ДляКого;
				ДобавитьСтрокуВРесурсы = НоваяЗадача.ЛицаКЗадаче.Добавить();
				НоваяЗадача.ЛицаКЗадаче[0].ЛицаПривлеченныеКЗадаче = ЗадачаПовторялка.ДляКого;
				ДобавитьУчастника = НоваяЗадача.ЛицаКЗадаче.Добавить().ЛицаПривлеченныеКЗадаче = ЗадачаПовторялка.ДляКого;
				НоваяЗадача.ПланируемаяДатаЗавершения = ЗадачаПовторялка.ПланируемаяДатаЗавершения + 2592000;
				НоваяЗадача.Записать();
			КонецЕсли;
		ИначеЕсли ЗадачаПовторялка.КакЧастоПовторять = Перечисления.ПериодыПовториения.Ежедневно Тогда 
			РодительскаяПовторялка = Задачи.Задача.НайтиПоНомеру(ЗадачаПовторялка.Номер);
			Если Формат(ЗадачаПовторялка.ПланируемаяДатаЗавершения, "ДЛФ = Д") < Формат(ТекущаяДата(), "ДЛФ = Д") Тогда 
				ПолучитьРодительскаяПовторялка = РодительскаяПовторялка.ПолучитьОбъект();
				ПолучитьРодительскаяПовторялка.Повторить = Ложь;
				ПолучитьРодительскаяПовторялка.Записать();
				НоваяЗадача = Задачи.Задача.СоздатьЗадачу();
				НоваяЗадача.Повторить = Истина;
				НоваяЗадача.КакЧастоПовторять = ЗадачаПовторялка.КакЧастоПовторять;
				НоваяЗадача.СтатусЗадачи = Перечисления.СтатусЗадачи.Новая; 
				НоваяЗадача.Наименование = ЗадачаПовторялка.Наименование;
				НоваяЗадача.Дата = ТекущаяДата(); 
				НоваяЗадача.ОтКого = ЗадачаПовторялка.ОтКого; 
				НоваяЗадача.ДляКого = ЗадачаПовторялка.ДляКого;
				ДобавитьСтрокуВРесурсы = НоваяЗадача.ЛицаКЗадаче.Добавить();
				НоваяЗадача.ЛицаКЗадаче[0].ЛицаПривлеченныеКЗадаче = ЗадачаПовторялка.ДляКого;
				НоваяЗадача.ПланируемаяДатаЗавершения = ЗадачаПовторялка.ПланируемаяДатаЗавершения + 86400;
				НоваяЗадача.Записать();
			ИначеЕсли ЗадачаПовторялка.КакЧастоПовторять = Перечисления.ПериодыПовториения.РазВНеделю Тогда 
				РодительскаяПовторялка = Задачи.Задача.НайтиПоНомеру(ЗадачаПовторялка.Номер);
				Если Формат(ЗадачаПовторялка.ПланируемаяДатаЗавершения, "ДЛФ = Д") < Формат(ТекущаяДата(), "ДЛФ = Д") Тогда 
					ПолучитьРодительскаяПовторялка = РодительскаяПовторялка.ПолучитьОбъект();
					ПолучитьРодительскаяПовторялка.Повторить = Ложь;
					ПолучитьРодительскаяПовторялка.Записать();
					НоваяЗадача = Задачи.Задача.СоздатьЗадачу();
					НоваяЗадача.Повторить = Истина;
					НоваяЗадача.КакЧастоПовторять = ЗадачаПовторялка.КакЧастоПовторять;
					НоваяЗадача.СтатусЗадачи = Перечисления.СтатусЗадачи.Новая; 
					НоваяЗадача.Наименование = ЗадачаПовторялка.Наименование;
					НоваяЗадача.Дата = ТекущаяДата(); 
					НоваяЗадача.ОтКого = ЗадачаПовторялка.ОтКого; 
					НоваяЗадача.ДляКого = ЗадачаПовторялка.ДляКого;
					ДобавитьСтрокуВРесурсы = НоваяЗадача.ЛицаКЗадаче.Добавить();
					НоваяЗадача.ЛицаКЗадаче[0].ЛицаПривлеченныеКЗадаче = ЗадачаПовторялка.ДляКого;
					ДобавитьУчастника = НоваяЗадача.ЛицаКЗадаче.Добавить().ЛицаПривлеченныеКЗадаче = ЗадачаПовторялка.ДляКого;
					НоваяЗадача.ПланируемаяДатаЗавершения = ЗадачаПовторялка.ПланируемаяДатаЗавершения + 604800;
					НоваяЗадача.Записать();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТекПол = ИмяПользователя();
	
	ПрименитьФильтрыДляЧеловека(ИмяПользователя(), Истина);
	//ПосчитатьКоличествоНевыполненных();
	Если ТекПол = "Меньших Николай Александрович" Тогда
		
		//ОткрытьФорму("Задача.Задача.Форма.Сегодня");
		ОткрытьФорму("Задача.Задача.Форма.ОбщийСписок");
		
	КонецЕсли;
	СоздатьПовторяющиесяЗадачи();
	ОбновлениФормы();
	ПолучитьСообщенияЗадач();
	ПодключитьОбработчикОжидания("ОбновлениФормы",600,Ложь); 
	ПодключитьОбработчикОжидания("ПолучитьСообщенияЗадач",120,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениФормы()
	Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСообщенияЗадач()
	Команда = Неопределено;
	ПроверитьСообщенияКоманда(Команда);
КонецПроцедуры


&НаКлиенте
Процедура Обновить()
	Элементы.СписокНовые.Обновить();
	Элементы.СписокВРаботе.Обновить();
	Элементы.СписокВозращеннаНаДоработку.Обновить();
	Элементы.СписокТребуетПроверки.Обновить();
	Элементы.СписокГотово.Обновить();	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадач(Команда)
	Обновить();
	//ПосчитатьКоличествоНевыполненных();
	ИсполнительВЗадачахПриИзмененииНаСервере();
	КураторВЗадачахПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СписокНовыеПриИзменении(Элемент)
	//ПосчитатьКоличествоНевыполненных();
	ИсполнительВЗадачахПриИзмененииНаСервере();
	КураторВЗадачахПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокВРаботеПриИзменении(Элемент)
	//ПосчитатьКоличествоНевыполненных();
	ИсполнительВЗадачахПриИзмененииНаСервере();	
	КураторВЗадачахПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокТребуетПроверкиПриИзменении(Элемент)
	//ПосчитатьКоличествоНевыполненных();
	ИсполнительВЗадачахПриИзмененииНаСервере();	
	КураторВЗадачахПриИзмененииНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СписокВозращеннаНаДоработкуПриИзменении(Элемент)
	//ПосчитатьКоличествоНевыполненных(); 
	ИсполнительВЗадачахПриИзмененииНаСервере();	
	КураторВЗадачахПриИзмененииНаСервере();	
КонецПроцедуры

&НаКлиенте
Процедура СписокГотовоПриИзменении(Элемент)
	//ПосчитатьКоличествоНевыполненных();
	ИсполнительВЗадачахПриИзмененииНаСервере();
	КураторВЗадачахПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия,Параметр,Источник)
	Если ИмяСобытия = "ОбновитьФормуСписка" Тогда
		Обновить();
		//ПосчитатьКоличествоНевыполненных();
		ИсполнительВЗадачахПриИзмененииНаСервере();	
		КураторВЗадачахПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьТолькоЗадачиОт(КураторЗадачи)
	СписокНовые.Отбор.Элементы.Очистить();	
	СписокВРаботе.Отбор.Элементы.Очистить();
	СписокВозращеннаНаДоработку.Отбор.Элементы.Очистить();
	СписокТребуетПроверки.Отбор.Элементы.Очистить();
	СписокГотово.Отбор.Элементы.Очистить();
	
	ЭлементОтбораНовые = СписокНовые.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораНовые.Использование = Истина;
	ЭлементОтбораНовые.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
	ЭлементОтбораНовые.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораНовые.ПравоеЗначение = КураторЗадачи;
	
	ЭлементОтбораВозращеннаНаДоработку = СписокВозращеннаНаДоработку.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораВозращеннаНаДоработку.Использование = Истина;
	ЭлементОтбораВозращеннаНаДоработку.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
	ЭлементОтбораВозращеннаНаДоработку.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораВозращеннаНаДоработку.ПравоеЗначение = КураторЗадачи;
	
	ЭлементОтбораТребуетПроверки = СписокТребуетПроверки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораТребуетПроверки.Использование = Истина;
	ЭлементОтбораТребуетПроверки.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
	ЭлементОтбораТребуетПроверки.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораТребуетПроверки.ПравоеЗначение = КураторЗадачи;
	
	ЭлементОтбораГотово = СписокГотово.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораГотово.Использование = Истина;
	ЭлементОтбораГотово.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
	ЭлементОтбораГотово.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораГотово.ПравоеЗначение = КураторЗадачи;
	
	ЭлементОтбораСписокВРаботе = СписокВРаботе.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораСписокВРаботе.Использование = Истина;
	ЭлементОтбораСписокВРаботе.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтКого");
	ЭлементОтбораСписокВРаботе.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ЭлементОтбораСписокВРаботе.ПравоеЗначение = КураторЗадачи;
КонецПроцедуры

&НаСервере
Процедура КураторВЗадачахПриИзмененииНаСервере()
	Если ПустаяСтрока(ЭтотОбъект.КураторВЗадачах.Наименование) Тогда
		ПрименитьФильтрыДляЧеловека(ИмяПользователя(), Истина);
		ЭтотОбъект.СколькоПоставленоЗадач = 0;
	Иначе
		ПоказатьТолькоЗадачиОт(ЭтотОбъект.КураторВЗадачах.Наименование);
		СколькоПоставленоЗадач = 0;
		Выборка = Задачи.Задача.Выбрать();
		Пока Выборка.Следующий() Цикл
			Задача = Выборка.Ссылка;
			Если Задача.ОтКого = ЭтотОбъект.КураторВЗадачах.Наименование Тогда
				СколькоПоставленоЗадач = СколькоПоставленоЗадач + 1;			
			КонецЕсли;	
		КонецЦикла;
		ЭтотОбъект.СколькоПоставленоЗадач = СколькоПоставленоЗадач;
		ЭтотОбъект.ИсполнительВЗадачах = Справочники.Призыв.ПустаяСсылка();
		ЭтотОбъект.СколькоНеВыполненноЗадач = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КураторВЗадачахПриИзменении(Элемент)
	КураторВЗадачахПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ИсполнительВЗадачахПриИзмененииНаСервере()
	Если ПустаяСтрока(ЭтотОбъект.ИсполнительВЗадачах.Наименование) Тогда
		ПрименитьФильтрыДляЧеловека(ИмяПользователя(), Истина);
		ЭтотОбъект.СколькоНеВыполненноЗадач = 0;
	Иначе
		ПрименитьФильтрыДляЧеловека(ЭтотОбъект.ИсполнительВЗадачах.Наименование, Ложь);
		СколькоНеВыполненноЗадач = 0;
		Выборка = Задачи.Задача.Выбрать();
		Пока Выборка.Следующий() Цикл
			Задача = Выборка.Ссылка;
			Если Задача.СтатусЗадачи <> Перечисления.СтатусЗадачи.Готово Тогда
				Если Задача.ЛицаКЗадаче.Найти(Справочники.Призыв.НайтиПоНаименованию(ЭтотОбъект.ИсполнительВЗадачах.Наименование)) <> Неопределено  Тогда
					СколькоНеВыполненноЗадач = СколькоНеВыполненноЗадач + 1;			
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		ЭтотОбъект.СколькоНеВыполненноЗадач = СколькоНеВыполненноЗадач;
		ЭтотОбъект.КураторВЗадачах = Справочники.Призыв.ПустаяСсылка();
		ЭтотОбъект.СколькоПоставленоЗадач = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительВЗадачахПриИзменении(Элемент)
	ИсполнительВЗадачахПриИзмененииНаСервере();
КонецПроцедуры


//УведомленияПользователейОНовыхСообщениях

&НаСервереБезКонтекста
Функция ПроверитьСообщенияКомандаНаСервере(ИмяТекущегоПользователя)
	МассивСтруктур = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяПользователя",ИмяТекущегоПользователя);
	Запрос.УстановитьПараметр("Готово", Перечисления.СтатусЗадачи.Готово);
	Запрос.Текст = 	"ВЫБРАТЬ
	               	|	Задача.Ссылка КАК Ссылка,
	               	|	Задача.ОбсужденияКЗадаче.(
	               	|		Ссылка КАК Ссылка,
	               	|		НомерСтроки КАК НомерСтроки,
	               	|		Сообщение КАК Сообщение,
	               	|		Отправитель КАК Отправитель,
	               	|		ВремяСоздания КАК ВремяСоздания,
	               	|		Просмотренно КАК Просмотренно
	               	|	) КАК ОбсужденияКЗадаче,
	               	|	Задача.ОтКого КАК ОтКого,
	               	|	Задача.ДляКого КАК ДляКого,
	               	|	Задача.ЛицаКЗадаче.(
	               	|		Ссылка КАК Ссылка,
	               	|		НомерСтроки КАК НомерСтроки,
	               	|		ЛицаПривлеченныеКЗадаче КАК ЛицаПривлеченныеКЗадаче,
	               	|		ПросмотренноЛицаКЗадаче КАК ПросмотренноЛицаКЗадаче
	               	|	) КАК ЛицаКЗадаче,
	               	|	Задача.СтатусЗадачи КАК СтатусЗадачи
	               	|ИЗ
	               	|	Задача.Задача КАК Задача
	               	|ГДЕ
	               	|	Задача.СтатусЗадачи <> &Готово";
	
	РузультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для каждого СообщенияВЗадачах Из РузультатЗапроса Цикл
		//ПолучитьПоследнийИндексСообщения = СообщенияВЗадачах.ОбсужденияКЗадаче.Индекс(СообщенияВЗадачах.ОбсужденияКЗадаче.Количество() - 1); 
		НайтиОбъектДляЗаписи = Задачи.Задача.НайтиПоНомеру(СообщенияВЗадачах.Ссылка.Номер);
		ПолучитьОбъектДляЗаписи = НайтиОбъектДляЗаписи.ПолучитьОбъект();
		СколькоСтрок = НайтиОбъектДляЗаписи.ОбсужденияКЗадаче.Количество();
		Если СколькоСтрок = 0 Тогда
			Продолжить;
			
			
		КонецЕсли;
		ПоследнееСообщение = ПолучитьОбъектДляЗаписи.ОбсужденияКЗадаче[СколькоСтрок - 1];
		//Уведомляем всех участиников
		Плучим = ПолучитьОбъектДляЗаписи.ЛицаКЗадаче.Выгрузить();
		Для каждого Строка Из Плучим Цикл
			Если Строка.ПросмотренноЛицаКЗадаче = Ложь И Строка(Строка.ЛицаПривлеченныеКЗадаче) = ИмяТекущегоПользователя И ПоследнееСообщение.Отправитель <> ИмяТекущегоПользователя  Тогда
				СсылкаНаЗадачу = ПолучитьНавигационнуюСсылку(СообщенияВЗадачах.Ссылка);
				СтруктураСообщенийИЗадач = Новый Структура;
				//СтруктураСообщенийИЗадач.Вставить("ДатаСообщения",ПоследнееСообщение.ВремяСоздания);
				СтруктураСообщенийИЗадач.Вставить("НомерЗадачи",СообщенияВЗадачах.Ссылка.Номер);
				СтруктураСообщенийИЗадач.Вставить("НавСсылка",СсылкаНаЗадачу);
				СтруктураСообщенийИЗадач.Вставить("ТекстСообщения",ПоследнееСообщение.Сообщение);
				МассивСтруктур.Добавить(СтруктураСообщенийИЗадач);
				ПолучитьОбъектДляЗаписи = НайтиОбъектДляЗаписи.ПолучитьОбъект();
				ПолучитьОбъектДляЗаписи.ЛицаКЗадаче[Строка.НомерСтроки - 1].ПросмотренноЛицаКЗадаче = Истина;
				Если Строка(ПолучитьОбъектДляЗаписи.ДляКого) = Строка(Строка.ЛицаПривлеченныеКЗадаче)  Тогда
					ПолучитьОбъектДляЗаписи.ОбсужденияКЗадаче[СколькоСтрок - 1].ПросмотренноИсполнителем = Истина;
					
					
				КонецЕсли;
				//ПолучитьОбъектДляЗаписи.ОбсужденияКЗадаче[СколькоСтрок - 1].Просмотренно = Истина;
				
				ПолучитьОбъектДляЗаписи.Записать();
			КонецЕсли;
			
			
		КонецЦикла;
		//Уведомляем всех участиников
		
		//ПолучитьПервыйИндекс = СообщенияВЗадачах.ОбсужденияКЗадаче.Количество();
		
		
		
		
		
		
		//ПолучитьПервыйИндекс = СообщенияВЗадачах.ОбсужденияКЗадаче.Количество();
		
		Если ПоследнееСообщение.Просмотренно = Ложь И Строка(ПолучитьОбъектДляЗаписи.ОтКого) = ИмяТекущегоПользователя И ПоследнееСообщение.Отправитель <> ИмяТекущегоПользователя Тогда
			СсылкаНаЗадачу = ПолучитьНавигационнуюСсылку(СообщенияВЗадачах.Ссылка);
			СтруктураСообщенийИЗадач = Новый Структура;
			//СтруктураСообщенийИЗадач.Вставить("ДатаСообщения",ПоследнееСообщение.ВремяСоздания);
			СтруктураСообщенийИЗадач.Вставить("НомерЗадачи",СообщенияВЗадачах.Ссылка.Номер);
			СтруктураСообщенийИЗадач.Вставить("НавСсылка",СсылкаНаЗадачу);
			СтруктураСообщенийИЗадач.Вставить("ТекстСообщения",ПоследнееСообщение.Сообщение);
			МассивСтруктур.Добавить(СтруктураСообщенийИЗадач);
			//ПоследнееСообщение.Просмотренно = Истина;
			ПолучитьОбъектДляЗаписи = НайтиОбъектДляЗаписи.ПолучитьОбъект();
			ПолучитьОбъектДляЗаписи.ОбсужденияКЗадаче[СколькоСтрок - 1].Просмотренно = Истина;
			ПолучитьОбъектДляЗаписи.Записать();
			
		КонецЕсли;
		
		//Если ПоследнееСообщение.ПросмотренноИсполнителем = Ложь И Строка(ПолучитьОбъектДляЗаписи.ДляКого) = ИмяТекущегоПользователя И ПоследнееСообщение.Отправитель <> ИмяТекущегоПользователя Тогда
		//	СсылкаНаЗадачу = ПолучитьНавигационнуюСсылку(СообщенияВЗадачах.Ссылка);
		//	СтруктураСообщенийИЗадач = Новый Структура;
		//	//СтруктураСообщенийИЗадач.Вставить("ДатаСообщения",ПоследнееСообщение.ВремяСоздания);
		//	СтруктураСообщенийИЗадач.Вставить("НомерЗадачи",СообщенияВЗадачах.Ссылка.Номер);
		//	СтруктураСообщенийИЗадач.Вставить("НавСсылка",СсылкаНаЗадачу);
		//	СтруктураСообщенийИЗадач.Вставить("ТекстСообщения",ПоследнееСообщение.Сообщение);
		//	МассивСтруктур.Добавить(СтруктураСообщенийИЗадач);
		//	//ПоследнееСообщение.Просмотренно = Истина;
		//	ПолучитьОбъектДляЗаписи = НайтиОбъектДляЗаписи.ПолучитьОбъект();
		//	ПолучитьОбъектДляЗаписи.ОбсужденияКЗадаче[СколькоСтрок - 1].ПросмотренноИсполнителем = Истина;
		//	ПолучитьОбъектДляЗаписи.Записать();
		//	
		//КонецЕсли;
		
		
	КонецЦикла;
	Возврат МассивСтруктур;
КонецФункции

&НаКлиенте
Процедура ПроверитьСообщенияКоманда(Команда)
	ИмяТекущегоПользователя = ИмяПользователя();
	СообщенияВЗадачах = ПроверитьСообщенияКомандаНаСервере(ИмяТекущегоПользователя);
	Для каждого УведомляемПользователя Из СообщенияВЗадачах Цикл
		ЗадачаСсылка = УведомляемПользователя.НавСсылка;
		НавигационаяСсылка = ЗадачаСсылка;
		ПоказатьОповещениеПользователя("Новое сообщение в задаче: " + УведомляемПользователя.НомерЗадачи 
		,НавигационаяСсылка
		,УведомляемПользователя.ТекстСообщения
		,БиблиотекаКартинок.Информация
		,СтатусОповещенияПользователя.Важное
		,Новый УникальныйИдентификатор);
		
		
		
	КонецЦикла;
КонецПроцедуры

//УведомленияПользователейОНовыхСообщениях



























